<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>力导向图</title>
  <style>
    html, body, svg{
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
    }
  </style>
</head>
<body>
  <svg viewBox="-400 -400 800 800">
      <path id="links" fill="none" stroke="gray"></path>
  </svg>
  <script src="/js/vector.js"></script>
<!-- <script src="js/force.js"></script> -->
  <script>
    var SVG_NS = 'http://www.w3.org/2000/svg';
    var XLINK_NS = 'http://www.w3.org/1999/xlink';
    var points = "a,b,c,d,e,f,g,h,i,j,k,l".split(',').map(function(name, index, arr) {
      return {
        name: name,
        color: 'hsl(' + (360 * index / arr.length) + ', 100%, 60%'
      };
    });
    var relation = 300;
    var FRICTION_COEFFICIENT = 0.988;
    var svg = document.querySelector('svg');
    var k = 0.05;
    var Vector = window.Vector;
    
    function random(min, max) {
      return Math.round(min + (max - min) * Math.random());
    }

    points.forEach(function(point) {
      var circle = document.createElementNS(SVG_NS, "circle");
      var x = random(-400, 400);
      var y = random(-400, 400);
      circle.setAttribute('cx', x);
      circle.setAttribute('cy', y);
      circle.setAttribute('r', 10);
      circle.setAttribute('fill', point.color);

      svg.appendChild(circle);

      point.circle = circle;
      point.s = new Vector(x, y); //位移
      point.v = new Vector(); //速度
      point.a = new Vector(); //加速度
    });

    var lastFrameTime = new Date();

    function update() {
      var frameTime = new Date();
      var t = frameTime - lastFrameTime;

      t /= 100;

      points.forEach(function(pa) {
        var f = new Vector();

        // 计算合力 点位置更新
        points.forEach(function(pb) {
          if ((pa === pb)) {
            return;
          }
          var x = Vector.fromPoints(pa.s, pb.s);
          var delta = x.distance() - relation;

          // f = k * x
          f = f.add(x.normalize(delta * k));
        })

        pa.a = f;
        pa.v = pa.v.add(pa.a.multiply(t)).multiply(FRICTION_COEFFICIENT);
        pa.s = pa.s.add(pa.v.multiply(t));

        pa.circle.setAttribute('cx', pa.s.x);
        pa.circle.setAttribute('cy', pa.s.y);
      })

      // 连线更新
      var linkPath = [];
      points.forEach(function(pa) {
        var sa = pa.s;
        points.forEach(function(pb) {
          if (pa === pb) {
            return;
          }
          var sb = pb.s;
          linkPath = linkPath.concat([
            'M', sa.x, sa.y,
            'L', sb.x, sb.y
          ]);
        })
      })

      document.getElementById('links').setAttribute('d', linkPath.join(' '));

      lastFrameTime = frameTime;
      window.requestAnimationFrame(update);
    }

    window.requestAnimationFrame(update);

  </script>

</body>
</html>